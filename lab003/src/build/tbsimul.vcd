$date
	Sat Jul 27 16:24:11 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb_ $end
$scope module uut $end
$var wire 3 ! a [2:0] $end
$var wire 4 " an [3:0] $end
$var wire 3 # b [2:0] $end
$var wire 1 $ ci $end
$var wire 1 % co $end
$var wire 4 & sum [3:0] $end
$var wire 1 ' c_out $end
$var wire 7 ( SSeg [0:6] $end
$scope module conversor $end
$var wire 4 ) BCD [3:0] $end
$var wire 4 * an [3:0] $end
$var reg 7 + SSeg [0:6] $end
$upscope $end
$scope module sumador $end
$var wire 3 , a [2:0] $end
$var wire 3 - b [2:0] $end
$var wire 1 $ ci $end
$var wire 3 . s [2:0] $end
$var wire 1 ' co $end
$var wire 1 / C2 $end
$var wire 1 0 C1 $end
$scope module sum0 $end
$var wire 1 1 A $end
$var wire 1 2 B $end
$var wire 1 3 Ci $end
$var wire 1 0 Co $end
$var wire 1 4 S $end
$var wire 1 5 and_1 $end
$var wire 1 6 and_2 $end
$var wire 1 7 xor_1 $end
$upscope $end
$scope module sum1 $end
$var wire 1 8 A $end
$var wire 1 9 B $end
$var wire 1 0 Ci $end
$var wire 1 / Co $end
$var wire 1 : S $end
$var wire 1 ; and_1 $end
$var wire 1 < and_2 $end
$var wire 1 = xor_1 $end
$upscope $end
$scope module sum2 $end
$var wire 1 > A $end
$var wire 1 ? B $end
$var wire 1 / Ci $end
$var wire 1 ' Co $end
$var wire 1 @ S $end
$var wire 1 A and_1 $end
$var wire 1 B and_2 $end
$var wire 1 C xor_1 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
b0 .
b0 -
b0 ,
b1 +
b1110 *
b0 )
b1 (
0'
b0 &
z%
z$
b0 #
b1110 "
b0 !
$end
#2
b110 (
b110 +
1:
b11 &
b11 )
b11 .
14
1=
17
19
11
b10 #
b10 -
b1 !
b1 ,
#4
b100000 (
b100000 +
1@
04
10
b110 &
b110 )
b110 .
1:
1/
07
15
0=
1;
12
18
b11 #
b11 -
b11 !
b11 ,
#6
1'
b0 (
b0 +
1<
0:
1/
1B
b1000 &
b1000 )
b0 .
0@
1=
0;
1C
09
1>
b1 #
b1 -
b111 !
b111 ,
#8
b110000 (
b110000 +
0<
1:
0B
b1110 &
b1110 )
b110 .
1@
0=
1;
0C
1A
19
1?
b111 #
b111 -
#20
